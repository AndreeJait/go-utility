// Code generated by mockery v2.42.2. DO NOT EDIT.

package postgres

import (
	context "context"

	dbitx "github.com/AndreeJait/go-utility/sqlw/postgres/dbitx"
	mock "github.com/stretchr/testify/mock"
)

// MockSqlW is an autogenerated mock type for the SqlW type
type MockSqlW struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *MockSqlW) Begin(ctx context.Context) (dbitx.DBITx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 dbitx.DBITx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dbitx.DBITx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dbitx.DBITx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbitx.DBITx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkInsert provides a mock function with given fields: ctx, tableName, fieldName, values
func (_m *MockSqlW) BulkInsert(ctx context.Context, tableName string, fieldName []string, values [][]interface{}) error {
	ret := _m.Called(ctx, tableName, fieldName, values)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, [][]interface{}) error); ok {
		r0 = rf(ctx, tableName, fieldName, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, queryString, args
func (_m *MockSqlW) Exec(ctx context.Context, queryString QueryString, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, queryString)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, QueryString, ...interface{}) error); ok {
		r0 = rf(ctx, queryString, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecNamed provides a mock function with given fields: ctx, queryString, param
func (_m *MockSqlW) ExecNamed(ctx context.Context, queryString QueryString, param QueryParam) error {
	ret := _m.Called(ctx, queryString, param)

	if len(ret) == 0 {
		panic("no return value specified for ExecNamed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, QueryString, QueryParam) error); ok {
		r0 = rf(ctx, queryString, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, dest, queryString, args
func (_m *MockSqlW) Get(ctx context.Context, dest interface{}, queryString QueryString, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, queryString)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, QueryString, ...interface{}) error); ok {
		r0 = rf(ctx, dest, queryString, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNamed provides a mock function with given fields: ctx, dest, queryString, param
func (_m *MockSqlW) GetNamed(ctx context.Context, dest interface{}, queryString QueryString, param QueryParam) error {
	ret := _m.Called(ctx, dest, queryString, param)

	if len(ret) == 0 {
		panic("no return value specified for GetNamed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, QueryString, QueryParam) error); ok {
		r0 = rf(ctx, dest, queryString, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, dest, queryString, args
func (_m *MockSqlW) Select(ctx context.Context, dest interface{}, queryString QueryString, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, queryString)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, QueryString, ...interface{}) error); ok {
		r0 = rf(ctx, dest, queryString, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectNamed provides a mock function with given fields: ctx, dest, queryString, param
func (_m *MockSqlW) SelectNamed(ctx context.Context, dest interface{}, queryString QueryString, param QueryParam) error {
	ret := _m.Called(ctx, dest, queryString, param)

	if len(ret) == 0 {
		panic("no return value specified for SelectNamed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, QueryString, QueryParam) error); ok {
		r0 = rf(ctx, dest, queryString, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSqlW creates a new instance of MockSqlW. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSqlW(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSqlW {
	mock := &MockSqlW{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
