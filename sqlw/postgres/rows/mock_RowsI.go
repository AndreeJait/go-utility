// Code generated by mockery v2.42.2. DO NOT EDIT.

package rows

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// MockRowsI is an autogenerated mock type for the RowsI type
type MockRowsI struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockRowsI) Close() {
	_m.Called()
}

// CommandTag provides a mock function with given fields:
func (_m *MockRowsI) CommandTag() pgconn.CommandTag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommandTag")
	}

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func() pgconn.CommandTag); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	return r0
}

// Conn provides a mock function with given fields:
func (_m *MockRowsI) Conn() *pgx.Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if rf, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *MockRowsI) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FieldDescriptions provides a mock function with given fields:
func (_m *MockRowsI) FieldDescriptions() []pgconn.FieldDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FieldDescriptions")
	}

	var r0 []pgconn.FieldDescription
	if rf, ok := ret.Get(0).(func() []pgconn.FieldDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgconn.FieldDescription)
		}
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *MockRowsI) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RawValues provides a mock function with given fields:
func (_m *MockRowsI) RawValues() [][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawValues")
	}

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *MockRowsI) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Values provides a mock function with given fields:
func (_m *MockRowsI) Values() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRowsI creates a new instance of MockRowsI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRowsI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRowsI {
	mock := &MockRowsI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
