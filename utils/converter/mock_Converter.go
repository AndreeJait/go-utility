// Code generated by mockery v2.42.2. DO NOT EDIT.

package converter

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	rows "github.com/AndreeJait/go-utility/sqlw/postgres/rows"
)

// MockConverter is an autogenerated mock type for the Converter type
type MockConverter struct {
	mock.Mock
}

// ConvertRows provides a mock function with given fields: _a0, tag, result
func (_m *MockConverter) ConvertRows(_a0 rows.RowsI, tag string, result interface{}) error {
	ret := _m.Called(_a0, tag, result)

	if len(ret) == 0 {
		panic("no return value specified for ConvertRows")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(rows.RowsI, string, interface{}) error); ok {
		r0 = rf(_a0, tag, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MapToReflectValue provides a mock function with given fields: mapRow, tag, reflectValue
func (_m *MockConverter) MapToReflectValue(mapRow map[string]interface{}, tag string, reflectValue reflect.Value) reflect.Value {
	ret := _m.Called(mapRow, tag, reflectValue)

	if len(ret) == 0 {
		panic("no return value specified for MapToReflectValue")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, reflect.Value) reflect.Value); ok {
		r0 = rf(mapRow, tag, reflectValue)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// NewMockConverter creates a new instance of MockConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConverter {
	mock := &MockConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
